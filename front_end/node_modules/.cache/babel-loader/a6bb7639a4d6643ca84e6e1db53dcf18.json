{"remainingRequest":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/babel-loader/lib/index.js!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/store.js","dependencies":[{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/store.js","mtime":1589641334000},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/babel-loader/lib/index.js","mtime":1573785088708},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1573785097475}],"contextDependencies":[],"result":["import _Date$now from \"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/@babel/runtime-corejs2/core-js/date/now\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\n/*\n * MODULE NAME: STORE\n * PROGRAMMER: YUE KA LONG\n * VERSION: 1.0 (16 MAY 2020)\n *\n * PURPOSE: THIS IS THE VUEX DOCUMENT WHICH IS A STATE MANAGEMENT PLUGIN\n *\n */\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport { service } from \"@/plugins/request_service\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  // here are the state we want to use\n  state: {\n    showToolBar: true,\n    // this is controlling where the toolbar show or not\n    showFooter: true,\n    // this is controlling where the footer show or not\n    token: undefined,\n    // this is storing the jwt token\n    expiryTime: \"\",\n    // this is storing the expiry time for login\n    user: undefined,\n    // this is storing the current user information\n    loggedIn: false // this is storing the user have logged in or not\n\n  },\n  mutations: {\n    // to assign new value to state 'showToolBar'\n    showToolBar: function showToolBar(state, val) {\n      state.showToolBar = val;\n    },\n    // to assign new value to state 'showFooter'\n    showFooter: function showFooter(state, val) {\n      state.showFooter = val;\n    },\n    // to set the things when login\n    login: function login(state, obj) {\n      localStorage.setItem(\"JWT\", obj.token); // set the localStorage to have JWT token\n\n      localStorage.setItem(\"expiryTime\", obj.exp); // set the localStorage to have expiry time\n\n      state.token = obj.token; // set the state to have the token for vue framework (it keep storing after refreshes)\n\n      state.user = obj.user; // set the state to have the user information for vue framework (it keep storing after refreshes)\n\n      state.expiryTime = obj.exp; // set the state to have the expiry time for vue framework (it keep storing after refreshes)\n\n      state.loggedIn = true; // set the state 'loggedIn' to be true for vue framework (it keep storing after refreshes)\n    },\n    // to remove the things when log out\n    logout: function logout(state) {\n      localStorage.removeItem(\"JWT\"); // remove the localStorage to have JWT token\n\n      localStorage.removeItem(\"expiryTime\"); // remove the localStorage to have expiry time\n\n      state.token = undefined; // remove the state 'token'\n\n      state.user = undefined; // remove the state 'user'\n\n      state.expiryTime = \"\"; // remove the state 'expiryTime'\n\n      state.loggedIn = false; // set the state 'loggedIn' to be false for vue framework\n    }\n  },\n  actions: {\n    // this handle the login request in front-end\n    login: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(context, credentials) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return service.post(\"/auth/login\", {\n                  username: credentials.username,\n                  password: credentials.password\n                }).then(function (res) {\n                  // if the credential are correct\n                  if (res.data.success) {\n                    // assign the variables to state by the function 'login' in mutation\n                    context.commit(\"login\", {\n                      token: res.data.data.token,\n                      user: res.data.data.userInfo[0],\n                      exp: Math.floor(_Date$now() / 1000) + 60 * 360\n                    }); // return the user information to have a signal\n\n                    return res.data.data.user;\n                  } else {\n                    // activate the function 'logout' in mutation\n                    context.commit(\"logout\"); // throw error\n\n                    throw \"Wrong username or password\";\n                  }\n                }).catch(function (err) {\n                  throw err;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }(),\n    // this is use to restore the session when everytime refreshes\n    restoreSession: function () {\n      var _restoreSession = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(context) {\n        var token, expiryTime, res, result, obj;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return localStorage.getItem(\"JWT\");\n\n              case 2:\n                token = _context2.sent;\n                _context2.next = 5;\n                return localStorage.getItem(\"expiryTime\");\n\n              case 5:\n                expiryTime = _context2.sent;\n                // get the local storage expiry time\n                // remove all the local storage and states first\n                context.commit(\"logout\");\n\n                if (!(expiryTime <= Math.floor(_Date$now() / 1000))) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw \"Session expired!\";\n\n              case 9:\n                _context2.next = 11;\n                return service.get(\"/auth/checkLogged\", {\n                  headers: {\n                    Authorization: \"Bearer \" + token\n                  }\n                });\n\n              case 11:\n                res = _context2.sent;\n\n                if (!res.data.success) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                // if logged in\n                result = res.data.data;\n                obj = {\n                  token: result.token,\n                  user: result.userInfo[0],\n                  exp: expiryTime\n                }; // assign the user information by running 'login' in mutation\n\n                context.commit(\"login\", obj);\n                return _context2.abrupt(\"return\", context.state.loggedIn);\n\n              case 19:\n                // if still not log in\n                service.get(\"/auth/logout\"); //logout again in back-end ensure clear everything in back-end\n                // throw logout\n\n                throw \"logout\";\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function restoreSession(_x3) {\n        return _restoreSession.apply(this, arguments);\n      }\n\n      return restoreSession;\n    }(),\n    // this handle the log out request in front-end\n    logout: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(context) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return service.get(\"/auth/logout\");\n\n              case 2:\n                res = _context3.sent;\n\n                if (res.data.data.success) {\n                  // remove the local storage things\n                  localStorage.removeItem(\"JWT\");\n                  localStorage.removeItem(\"expiryTime\"); // run 'logout' to remove all the login states\n\n                  context.commit(\"logout\");\n                } // return the state 'loggedIn'\n\n\n                return _context3.abrupt(\"return\", context.state.loggedIn);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function logout(_x4) {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }\n});",{"version":3,"sources":["/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/store.js"],"names":["Vue","Vuex","service","use","Store","state","showToolBar","showFooter","token","undefined","expiryTime","user","loggedIn","mutations","val","login","obj","localStorage","setItem","exp","logout","removeItem","actions","context","credentials","post","username","password","then","res","data","success","commit","userInfo","Math","floor","catch","err","restoreSession","getItem","get","headers","Authorization","result"],"mappings":";;;;AAAA;;;;;;;;AAQA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACG,KAAT,CAAe;AAC5B;AACAC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,IADR;AACc;AACnBC,IAAAA,UAAU,EAAE,IAFP;AAEa;AAClBC,IAAAA,KAAK,EAAEC,SAHF;AAGa;AAClBC,IAAAA,UAAU,EAAE,EAJP;AAIW;AAChBC,IAAAA,IAAI,EAAEF,SALD;AAKY;AACjBG,IAAAA,QAAQ,EAAE,KANL,CAMW;;AANX,GAFqB;AAU5BC,EAAAA,SAAS,EAAE;AACT;AACAP,IAAAA,WAFS,uBAEGD,KAFH,EAEUS,GAFV,EAEe;AACtBT,MAAAA,KAAK,CAACC,WAAN,GAAoBQ,GAApB;AACD,KAJQ;AAMT;AACAP,IAAAA,UAPS,sBAOEF,KAPF,EAOSS,GAPT,EAOc;AACrBT,MAAAA,KAAK,CAACE,UAAN,GAAmBO,GAAnB;AACD,KATQ;AAWT;AACAC,IAAAA,KAZS,iBAYHV,KAZG,EAYIW,GAZJ,EAYS;AAChBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,GAAG,CAACR,KAAhC,EADgB,CACwB;;AACxCS,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCF,GAAG,CAACG,GAAvC,EAFgB,CAE6B;;AAC7Cd,MAAAA,KAAK,CAACG,KAAN,GAAcQ,GAAG,CAACR,KAAlB,CAHgB,CAGS;;AACzBH,MAAAA,KAAK,CAACM,IAAN,GAAaK,GAAG,CAACL,IAAjB,CAJgB,CAIO;;AACvBN,MAAAA,KAAK,CAACK,UAAN,GAAmBM,GAAG,CAACG,GAAvB,CALgB,CAKY;;AAC5Bd,MAAAA,KAAK,CAACO,QAAN,GAAiB,IAAjB,CANgB,CAMO;AACxB,KAnBQ;AAqBT;AACAQ,IAAAA,MAtBS,kBAsBFf,KAtBE,EAsBK;AACZY,MAAAA,YAAY,CAACI,UAAb,CAAwB,KAAxB,EADY,CACoB;;AAChCJ,MAAAA,YAAY,CAACI,UAAb,CAAwB,YAAxB,EAFY,CAE2B;;AACvChB,MAAAA,KAAK,CAACG,KAAN,GAAcC,SAAd,CAHY,CAGa;;AACzBJ,MAAAA,KAAK,CAACM,IAAN,GAAaF,SAAb,CAJY,CAIY;;AACxBJ,MAAAA,KAAK,CAACK,UAAN,GAAmB,EAAnB,CALY,CAKW;;AACvBL,MAAAA,KAAK,CAACO,QAAN,GAAiB,KAAjB,CANY,CAMY;AACzB;AA7BQ,GAViB;AAyC5BU,EAAAA,OAAO,EAAE;AACP;AACMP,IAAAA,KAFC;AAAA;AAAA;AAAA,+CAEKQ,OAFL,EAEcC,WAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAIQtB,OAAO,CACjBuB,IADU,CACL,aADK,EACU;AACnBC,kBAAAA,QAAQ,EAAEF,WAAW,CAACE,QADH;AAEnBC,kBAAAA,QAAQ,EAAEH,WAAW,CAACG;AAFH,iBADV,EAKVC,IALU,CAKL,UAAAC,GAAG,EAAI;AACX;AACA,sBAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb,EAAsB;AACpB;AACAR,oBAAAA,OAAO,CAACS,MAAR,CAAe,OAAf,EAAwB;AACtBxB,sBAAAA,KAAK,EAAEqB,GAAG,CAACC,IAAJ,CAASA,IAAT,CAActB,KADC;AAEtBG,sBAAAA,IAAI,EAAEkB,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,QAAd,CAAuB,CAAvB,CAFgB;AAGtBd,sBAAAA,GAAG,EAAEe,IAAI,CAACC,KAAL,CAAW,cAAa,IAAxB,IAAgC,KAAK;AAHpB,qBAAxB,EAFoB,CAOpB;;AACA,2BAAON,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcnB,IAArB;AACD,mBATD,MASO;AACL;AACAY,oBAAAA,OAAO,CAACS,MAAR,CAAe,QAAf,EAFK,CAGL;;AACA,0BAAM,4BAAN;AACD;AACF,iBAtBU,EAuBVI,KAvBU,CAuBJ,UAAAC,GAAG,EAAI;AACZ,wBAAMA,GAAN;AACD,iBAzBU,CAJR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgCP;AACMC,IAAAA,cAjCC;AAAA;AAAA;AAAA,gDAiCcf,OAjCd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAkCeN,YAAY,CAACsB,OAAb,CAAqB,KAArB,CAlCf;;AAAA;AAkCC/B,gBAAAA,KAlCD;AAAA;AAAA,uBAmCoBS,YAAY,CAACsB,OAAb,CAAqB,YAArB,CAnCpB;;AAAA;AAmCC7B,gBAAAA,UAnCD;AAmCwD;AAE7D;AACAa,gBAAAA,OAAO,CAACS,MAAR,CAAe,QAAf;;AAtCK,sBAwCDtB,UAAU,IAAIwB,IAAI,CAACC,KAAL,CAAW,cAAa,IAAxB,CAxCb;AAAA;AAAA;AAAA;;AAAA,sBA0CG,kBA1CH;;AAAA;AAAA;AAAA,uBA8CWjC,OAAO,CAACsC,GAAR,sBAAiC;AAC/CC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,aAAa,EAAE,YAAYlC;AADpB;AADsC,iBAAjC,CA9CX;;AAAA;AA8CDqB,gBAAAA,GA9CC;;AAAA,qBAoDDA,GAAG,CAACC,IAAJ,CAASC,OApDR;AAAA;AAAA;AAAA;;AAqDH;AACIY,gBAAAA,MAtDD,GAsDUd,GAAG,CAACC,IAAJ,CAASA,IAtDnB;AAuDCd,gBAAAA,GAvDD,GAuDO;AACRR,kBAAAA,KAAK,EAAEmC,MAAM,CAACnC,KADN;AAERG,kBAAAA,IAAI,EAAEgC,MAAM,CAACV,QAAP,CAAgB,CAAhB,CAFE;AAGRd,kBAAAA,GAAG,EAAET;AAHG,iBAvDP,EA6DH;;AACAa,gBAAAA,OAAO,CAACS,MAAR,CAAe,OAAf,EAAwBhB,GAAxB;AA9DG,kDAgEIO,OAAO,CAAClB,KAAR,CAAcO,QAhElB;;AAAA;AAkEH;AACAV,gBAAAA,OAAO,CAACsC,GAAR,CAAY,cAAZ,EAnEG,CAmE0B;AAE7B;;AArEG,sBAsEG,QAtEH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA0EP;AACMpB,IAAAA,MA3EC;AAAA;AAAA;AAAA,gDA2EMG,OA3EN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA6EWrB,OAAO,CAACsC,GAAR,gBA7EX;;AAAA;AA6EDX,gBAAAA,GA7EC;;AA8EL,oBAAIA,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcC,OAAlB,EAA2B;AACzB;AACAd,kBAAAA,YAAY,CAACI,UAAb,CAAwB,KAAxB;AACAJ,kBAAAA,YAAY,CAACI,UAAb,CAAwB,YAAxB,EAHyB,CAKzB;;AACAE,kBAAAA,OAAO,CAACS,MAAR,CAAe,QAAf;AACD,iBArFI,CAsFL;;;AAtFK,kDAuFET,OAAO,CAAClB,KAAR,CAAcO,QAvFhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAzCmB,CAAf,CAAf","sourcesContent":["/*\n * MODULE NAME: STORE\n * PROGRAMMER: YUE KA LONG\n * VERSION: 1.0 (16 MAY 2020)\n *\n * PURPOSE: THIS IS THE VUEX DOCUMENT WHICH IS A STATE MANAGEMENT PLUGIN\n *\n */\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport { service } from \"@/plugins/request_service\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  // here are the state we want to use\n  state: {\n    showToolBar: true, // this is controlling where the toolbar show or not\n    showFooter: true, // this is controlling where the footer show or not\n    token: undefined, // this is storing the jwt token\n    expiryTime: \"\", // this is storing the expiry time for login\n    user: undefined, // this is storing the current user information\n    loggedIn: false // this is storing the user have logged in or not\n  },\n  mutations: {\n    // to assign new value to state 'showToolBar'\n    showToolBar(state, val) {\n      state.showToolBar = val;\n    },\n\n    // to assign new value to state 'showFooter'\n    showFooter(state, val) {\n      state.showFooter = val;\n    },\n\n    // to set the things when login\n    login(state, obj) {\n      localStorage.setItem(\"JWT\", obj.token); // set the localStorage to have JWT token\n      localStorage.setItem(\"expiryTime\", obj.exp); // set the localStorage to have expiry time\n      state.token = obj.token; // set the state to have the token for vue framework (it keep storing after refreshes)\n      state.user = obj.user; // set the state to have the user information for vue framework (it keep storing after refreshes)\n      state.expiryTime = obj.exp; // set the state to have the expiry time for vue framework (it keep storing after refreshes)\n      state.loggedIn = true; // set the state 'loggedIn' to be true for vue framework (it keep storing after refreshes)\n    },\n\n    // to remove the things when log out\n    logout(state) {\n      localStorage.removeItem(\"JWT\"); // remove the localStorage to have JWT token\n      localStorage.removeItem(\"expiryTime\"); // remove the localStorage to have expiry time\n      state.token = undefined; // remove the state 'token'\n      state.user = undefined; // remove the state 'user'\n      state.expiryTime = \"\"; // remove the state 'expiryTime'\n      state.loggedIn = false; // set the state 'loggedIn' to be false for vue framework\n    }\n  },\n  actions: {\n    // this handle the login request in front-end\n    async login(context, credentials) {\n      // this helps to send the credentials to our back-end server to check they are correctly or not\n      return await service\n        .post(\"/auth/login\", {\n          username: credentials.username,\n          password: credentials.password\n        })\n        .then(res => {\n          // if the credential are correct\n          if (res.data.success) {\n            // assign the variables to state by the function 'login' in mutation\n            context.commit(\"login\", {\n              token: res.data.data.token,\n              user: res.data.data.userInfo[0],\n              exp: Math.floor(Date.now() / 1000) + 60 * 360\n            });\n            // return the user information to have a signal\n            return res.data.data.user;\n          } else {\n            // activate the function 'logout' in mutation\n            context.commit(\"logout\");\n            // throw error\n            throw \"Wrong username or password\";\n          }\n        })\n        .catch(err => {\n          throw err;\n        });\n    },\n\n    // this is use to restore the session when everytime refreshes\n    async restoreSession(context) {\n      const token = await localStorage.getItem(\"JWT\"); // get the local storage JWT token\n      const expiryTime = await localStorage.getItem(\"expiryTime\"); // get the local storage expiry time\n\n      // remove all the local storage and states first\n      context.commit(\"logout\");\n\n      if (expiryTime <= Math.floor(Date.now() / 1000)) {\n        // if the login expired, throw error\n        throw \"Session expired!\";\n      }\n\n      // to check logged in in back-end or not\n      let res = await service.get(`/auth/checkLogged`, {\n        headers: {\n          Authorization: \"Bearer \" + token\n        }\n      });\n\n      if (res.data.success) {\n        // if logged in\n        let result = res.data.data;\n        let obj = {\n          token: result.token,\n          user: result.userInfo[0],\n          exp: expiryTime\n        };\n\n        // assign the user information by running 'login' in mutation\n        context.commit(\"login\", obj);\n\n        return context.state.loggedIn; //return the state 'loggedIn'\n      } else {\n        // if still not log in\n        service.get(\"/auth/logout\"); //logout again in back-end ensure clear everything in back-end\n\n        // throw logout\n        throw \"logout\";\n      }\n    },\n\n    // this handle the log out request in front-end\n    async logout(context) {\n      // logout in back-end first\n      let res = await service.get(`/auth/logout`);\n      if (res.data.data.success) {\n        // remove the local storage things\n        localStorage.removeItem(\"JWT\");\n        localStorage.removeItem(\"expiryTime\");\n\n        // run 'logout' to remove all the login states\n        context.commit(\"logout\");\n      }\n      // return the state 'loggedIn'\n      return context.state.loggedIn;\n    }\n  }\n});\n"]}]}