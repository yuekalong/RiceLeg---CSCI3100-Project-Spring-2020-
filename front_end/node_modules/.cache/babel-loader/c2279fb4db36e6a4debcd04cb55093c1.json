{"remainingRequest":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/babel-loader/lib/index.js!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/Chatroom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/Chatroom.vue","mtime":1585194971748},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/babel-loader/lib/index.js","mtime":1573785088708},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vuetify-loader/lib/loader.js","mtime":1584457032094},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js","mtime":1573785100670}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport socket from \"vue-socket.io\";\nimport ChatroomToolbar from \"@/components/chatroom/ChatroomToolbar.vue\";\nimport { service } from \"@/plugins/request_service\";\nexport default {\n  name: \"chatroom\",\n  components: {\n    ChatroomToolbar: ChatroomToolbar\n  },\n  data: function data() {\n    return {\n      message: \"\",\n      history: \"\",\n      newMsg: \"\",\n      username: \"long\",\n      user: {\n        name: \"long\"\n      },\n      haveRoom: false,\n      roomMessage: \"Please input your name and join a room first.\",\n      listOfRoom: [{\n        oppName: \"Room 1\",\n        roomID: \"1000\"\n      }, {\n        oppName: \"Room 2\",\n        roomID: \"2000\"\n      }]\n    };\n  },\n  mounted: function mounted() {\n    this.getListofRoom();\n  },\n  sockets: {\n    getHistory: function getHistory(history) {\n      this.history = history;\n    },\n    receiveMsg: function receiveMsg(_receiveMsg) {\n      this.message += _receiveMsg;\n    },\n    leaveRoom: function leaveRoom(leaveMsg) {\n      this.message += leaveMsg;\n    }\n  },\n  methods: {\n    getListofRoom: function getListofRoom() {\n      var _this = this;\n\n      service.get(\"/chatroom/getListofRoom/\".concat(this.user[\"name\"])).then(function (res) {\n        if (res.data.success) {\n          var temp = res.data.data;\n          _this.listOfRoom = temp.map(function (s) {\n            return s = {\n              roomID: s.roomID,\n              oppName: s.username_A == _this.user[\"name\"] ? s.username_B : s.username_A\n            };\n          });\n        }\n      });\n    },\n    joinedRoom: function joinedRoom(oppName) {\n      this.haveRoom = true;\n      this.roomMessage = \"You have joined \".concat(oppName, \"'s room\");\n      this.message = \"\";\n    },\n    sendMsg: function sendMsg() {\n      this.$socket.emit(\"sendMsg\", this.user, this.newMsg);\n      this.newMsg = \"\";\n    }\n  },\n  watch: {\n    username: function username() {\n      this.user.name = this.username;\n      this.getListofRoom();\n    }\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    if (!Vue.prototype.$socket) {\n      Vue.use(new socket({\n        debug: true,\n        connection: \"http://localhost:3000\",\n        vuex: {}\n      }));\n    }\n\n    next();\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    var answer = window.confirm(\"Do you really want to leave? you have unsaved changes!\");\n\n    if (answer) {\n      this.$socket.emit(\"leavePage\", this.user);\n      delete Vue.prototype.$socket;\n      next();\n    } else {\n      next(false);\n    }\n  }\n};",{"version":3,"sources":["Chatroom.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"chatroom\">\n    <v-container grid-list-xl>\n      <v-card class=\"primary\">\n        <v-card-title class=\"white--text\">\n          <h1>Chatroom</h1>\n        </v-card-title>\n        <div></div>\n        <v-card-text class=\"white\">\n          <v-text-field\n            v-model=\"username\"\n            :disabled=\"haveRoom\"\n            label=\"Type your name here!\"\n            outlined\n          />\n          <ChatroomToolbar\n            v-if=\"user.name != null\"\n            :user=\"user\"\n            @joinedRoom=\"joinedRoom\"\n            :listOfRoom=\"listOfRoom\"\n          />\n          <v-alert height=\"500px\" elevation=\"1\" color=\"primary\" outlined>\n            <h3 class=\"grey--text\">{{ roomMessage }}</h3>\n            <span\n              class=\"text--disabled\"\n              v-for=\"history in history.split('\\n')\"\n              :key=\"history.index\"\n            >\n              {{ history }}\n              <br />\n            </span>\n            <template v-for=\"message in message.split('\\n')\">\n              {{ message }}\n              \n            </template>\n          </v-alert>\n          <v-text-field\n            :disabled=\"user.name == null\"\n            v-model=\"newMsg\"\n            label=\"Type your message here!\"\n            outlined\n            v-on:keyup.enter=\"sendMsg\"\n          />\n          <v-btn :disabled=\"!haveRoom\" class=\"secondary\" @click=\"sendMsg\">Send</v-btn>\n        </v-card-text>\n      </v-card>\n    </v-container>\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport socket from \"vue-socket.io\";\nimport ChatroomToolbar from \"@/components/chatroom/ChatroomToolbar.vue\";\nimport { service } from \"@/plugins/request_service\";\n\nexport default {\n  name: \"chatroom\",\n  components: {\n    ChatroomToolbar\n  },\n  data: () => ({\n    message: \"\",\n    history: \"\",\n    newMsg: \"\",\n    username: \"long\",\n    user: {\n      name: \"long\"\n    },\n    haveRoom: false,\n    roomMessage: \"Please input your name and join a room first.\",\n    listOfRoom: [\n      {\n        oppName: \"Room 1\",\n        roomID: \"1000\"\n      },\n      {\n        oppName: \"Room 2\",\n        roomID: \"2000\"\n      }\n    ]\n  }),\n  mounted() {\n    this.getListofRoom();\n  },\n  sockets: {\n    getHistory(history) {\n      this.history = history;\n    },\n    receiveMsg(receiveMsg) {\n      this.message += receiveMsg;\n    },\n    leaveRoom(leaveMsg) {\n      this.message += leaveMsg;\n    }\n  },\n  methods: {\n    getListofRoom() {\n      service.get(`/chatroom/getListofRoom/${this.user[\"name\"]}`).then(res => {\n        if (res.data.success) {\n          let temp = res.data.data;\n          this.listOfRoom = temp.map(\n            s =>\n              (s = {\n                roomID: s.roomID,\n                oppName:\n                  s.username_A == this.user[\"name\"]\n                    ? s.username_B\n                    : s.username_A\n              })\n          );\n        }\n      });\n    },\n    joinedRoom(oppName) {\n      this.haveRoom = true;\n      this.roomMessage = `You have joined ${oppName}'s room`;\n      this.message = \"\";\n    },\n    sendMsg() {\n      this.$socket.emit(\"sendMsg\", this.user, this.newMsg);\n      this.newMsg = \"\";\n    }\n  },\n  watch: {\n    username: function() {\n      this.user.name = this.username;\n      this.getListofRoom();\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    if (!Vue.prototype.$socket) {\n      Vue.use(\n        new socket({\n          debug: true,\n          connection: \"http://localhost:3000\",\n          vuex: {}\n        })\n      );\n    }\n    next();\n  },\n  beforeRouteLeave(to, from, next) {\n    const answer = window.confirm(\n      \"Do you really want to leave? you have unsaved changes!\"\n    );\n    if (answer) {\n      this.$socket.emit(\"leavePage\", this.user);\n      delete Vue.prototype.$socket;\n      next();\n    } else {\n      next(false);\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/views"}]}