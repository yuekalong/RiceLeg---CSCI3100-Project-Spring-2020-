{"remainingRequest":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/Chatroom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/Chatroom.vue","mtime":1585194971748},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/babel-loader/lib/index.js","mtime":1573785088708},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vuetify-loader/lib/loader.js","mtime":1584457032094},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js","mtime":1573785100670}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from \"vue\";\nimport socket from \"vue-socket.io\";\nimport ChatroomToolbar from \"@/components/chatroom/ChatroomToolbar.vue\";\nimport { service } from \"@/plugins/request_service\";\n\nexport default {\n  name: \"chatroom\",\n  components: {\n    ChatroomToolbar\n  },\n  data: () => ({\n    message: \"\",\n    history: \"\",\n    newMsg: \"\",\n    username: \"long\",\n    user: {\n      name: \"long\"\n    },\n    haveRoom: false,\n    roomMessage: \"Please input your name and join a room first.\",\n    listOfRoom: [\n      {\n        oppName: \"Room 1\",\n        roomID: \"1000\"\n      },\n      {\n        oppName: \"Room 2\",\n        roomID: \"2000\"\n      }\n    ]\n  }),\n  mounted() {\n    this.getListofRoom();\n  },\n  sockets: {\n    getHistory(history) {\n      this.history = history;\n    },\n    receiveMsg(receiveMsg) {\n      this.message += receiveMsg;\n    },\n    leaveRoom(leaveMsg) {\n      this.message += leaveMsg;\n    }\n  },\n  methods: {\n    getListofRoom() {\n      service.get(`/chatroom/getListofRoom/${this.user[\"name\"]}`).then(res => {\n        if (res.data.success) {\n          let temp = res.data.data;\n          this.listOfRoom = temp.map(\n            s =>\n              (s = {\n                roomID: s.roomID,\n                oppName:\n                  s.username_A == this.user[\"name\"]\n                    ? s.username_B\n                    : s.username_A\n              })\n          );\n        }\n      });\n    },\n    joinedRoom(oppName) {\n      this.haveRoom = true;\n      this.roomMessage = `You have joined ${oppName}'s room`;\n      this.message = \"\";\n    },\n    sendMsg() {\n      this.$socket.emit(\"sendMsg\", this.user, this.newMsg);\n      this.newMsg = \"\";\n    }\n  },\n  watch: {\n    username: function() {\n      this.user.name = this.username;\n      this.getListofRoom();\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    if (!Vue.prototype.$socket) {\n      Vue.use(\n        new socket({\n          debug: true,\n          connection: \"http://localhost:3000\",\n          vuex: {}\n        })\n      );\n    }\n    next();\n  },\n  beforeRouteLeave(to, from, next) {\n    const answer = window.confirm(\n      \"Do you really want to leave? you have unsaved changes!\"\n    );\n    if (answer) {\n      this.$socket.emit(\"leavePage\", this.user);\n      delete Vue.prototype.$socket;\n      next();\n    } else {\n      next(false);\n    }\n  }\n};\n",{"version":3,"sources":["Chatroom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chatroom.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"chatroom\">\n    <v-container grid-list-xl>\n      <v-card class=\"primary\">\n        <v-card-title class=\"white--text\">\n          <h1>Chatroom</h1>\n        </v-card-title>\n        <div></div>\n        <v-card-text class=\"white\">\n          <v-text-field\n            v-model=\"username\"\n            :disabled=\"haveRoom\"\n            label=\"Type your name here!\"\n            outlined\n          />\n          <ChatroomToolbar\n            v-if=\"user.name != null\"\n            :user=\"user\"\n            @joinedRoom=\"joinedRoom\"\n            :listOfRoom=\"listOfRoom\"\n          />\n          <v-alert height=\"500px\" elevation=\"1\" color=\"primary\" outlined>\n            <h3 class=\"grey--text\">{{ roomMessage }}</h3>\n            <span\n              class=\"text--disabled\"\n              v-for=\"history in history.split('\\n')\"\n              :key=\"history.index\"\n            >\n              {{ history }}\n              <br />\n            </span>\n            <template v-for=\"message in message.split('\\n')\">\n              {{ message }}\n              \n            </template>\n          </v-alert>\n          <v-text-field\n            :disabled=\"user.name == null\"\n            v-model=\"newMsg\"\n            label=\"Type your message here!\"\n            outlined\n            v-on:keyup.enter=\"sendMsg\"\n          />\n          <v-btn :disabled=\"!haveRoom\" class=\"secondary\" @click=\"sendMsg\">Send</v-btn>\n        </v-card-text>\n      </v-card>\n    </v-container>\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport socket from \"vue-socket.io\";\nimport ChatroomToolbar from \"@/components/chatroom/ChatroomToolbar.vue\";\nimport { service } from \"@/plugins/request_service\";\n\nexport default {\n  name: \"chatroom\",\n  components: {\n    ChatroomToolbar\n  },\n  data: () => ({\n    message: \"\",\n    history: \"\",\n    newMsg: \"\",\n    username: \"long\",\n    user: {\n      name: \"long\"\n    },\n    haveRoom: false,\n    roomMessage: \"Please input your name and join a room first.\",\n    listOfRoom: [\n      {\n        oppName: \"Room 1\",\n        roomID: \"1000\"\n      },\n      {\n        oppName: \"Room 2\",\n        roomID: \"2000\"\n      }\n    ]\n  }),\n  mounted() {\n    this.getListofRoom();\n  },\n  sockets: {\n    getHistory(history) {\n      this.history = history;\n    },\n    receiveMsg(receiveMsg) {\n      this.message += receiveMsg;\n    },\n    leaveRoom(leaveMsg) {\n      this.message += leaveMsg;\n    }\n  },\n  methods: {\n    getListofRoom() {\n      service.get(`/chatroom/getListofRoom/${this.user[\"name\"]}`).then(res => {\n        if (res.data.success) {\n          let temp = res.data.data;\n          this.listOfRoom = temp.map(\n            s =>\n              (s = {\n                roomID: s.roomID,\n                oppName:\n                  s.username_A == this.user[\"name\"]\n                    ? s.username_B\n                    : s.username_A\n              })\n          );\n        }\n      });\n    },\n    joinedRoom(oppName) {\n      this.haveRoom = true;\n      this.roomMessage = `You have joined ${oppName}'s room`;\n      this.message = \"\";\n    },\n    sendMsg() {\n      this.$socket.emit(\"sendMsg\", this.user, this.newMsg);\n      this.newMsg = \"\";\n    }\n  },\n  watch: {\n    username: function() {\n      this.user.name = this.username;\n      this.getListofRoom();\n    }\n  },\n  beforeRouteEnter(to, from, next) {\n    if (!Vue.prototype.$socket) {\n      Vue.use(\n        new socket({\n          debug: true,\n          connection: \"http://localhost:3000\",\n          vuex: {}\n        })\n      );\n    }\n    next();\n  },\n  beforeRouteLeave(to, from, next) {\n    const answer = window.confirm(\n      \"Do you really want to leave? you have unsaved changes!\"\n    );\n    if (answer) {\n      this.$socket.emit(\"leavePage\", this.user);\n      delete Vue.prototype.$socket;\n      next();\n    } else {\n      next(false);\n    }\n  }\n};\n</script>\n"]}]}