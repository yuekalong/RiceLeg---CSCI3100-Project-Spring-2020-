{"remainingRequest":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/RestaurantDisplay.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/RestaurantDisplay.vue","mtime":1589641518000},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/babel-loader/lib/index.js","mtime":1573785088708},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vuetify-loader/lib/loader.js","mtime":1584457032094},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js","mtime":1573785100670}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { service } from \"@/plugins/request_service\";\nimport Comment from \"@/components/restaurant/Comment\";\n// import the child component and the the plugins from external file or library\n\nexport default {\n  components: {\n    Comment // all child component will be listed here\n  },\n  data: () => ({\n    itemsPerPageArray: [4, 8, 12],\n    search: \"\",\n    filter: {},\n    sortDesc: false,\n    page: 1,\n    itemsPerPage: 4,\n    sortBy: \"restaurantName\", // it is the default sorting keyword and we not yet type the code and test for other keywords\n\n    // it is use to test if the cardbox are shown correctly, u will see it when local database is not linked or exist.\n    restaurant: [\n      {\n        restaurantName: \"aaaa\",\n        restaurantDestination: \"aaaa\",\n        dailyOpeningTime: \"aaaaa\",\n        dailyClosingTime: \"aaaa\",\n        holidayOpeningTime: \"aaaa\",\n        holidayClosingTime: \"aaaaa\"\n      }\n    ]\n  }),\n  computed: {\n    // to get the latest page number to update the window\n    numberOfPages() {\n      return Math.ceil(this.restaurant.length / this.itemsPerPage);\n    },\n    // to update the page via the search keyword\n    filteredKeys() {\n      return this.keys.filter(key => key !== `Name`);\n    }\n  },\n  mounted() {\n    this.fetchData(); //get the unsorted data from database at mounted stage after the template iss being created\n  },\n  methods: {\n    //next page button\n    nextPage() {\n      if (this.page + 1 <= this.numberOfPages) this.page += 1;\n    },\n\n    //previous page button\n    formerPage() {\n      if (this.page - 1 >= 1) this.page -= 1;\n    },\n\n    //call when different number of item requires is changed\n    updateItemsPerPage(number) {\n      this.itemsPerPage = number;\n    },\n\n    fetchData() {\n      service.get(`/restaurant/getAllRestaurant/`).then(res => {\n        if (res.data.success) {\n          this.restaurant = res.data.data;\n        }\n      });\n    }\n  }\n};\n",{"version":3,"sources":["RestaurantDisplay.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RestaurantDisplay.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <!-- id belongs to restaurant display-->\n  <div id=\"RestaurantDisplay\">\n    <v-container grid-list-xl>\n      <!-- use this vue function to show the restuarant in display one by one -->\n      <v-data-iterator\n        :items=\"restaurant\"\n        :items-per-page.sync=\"itemsPerPage\"\n        :page=\"page\"\n        :search=\"search\"\n        :sort-by=\"sortBy.toLowerCase()\"\n        :sort-desc=\"sortDesc\"\n        hide-default-footer\n      >\n        <template v-slot:header>\n          <v-toolbar dark color=\"primary darken-1\" class=\"mb-1\">\n            <!-- this is reponsibe for the pink bar of thee searching function -->\n            <v-text-field\n              v-model=\"search\"\n              clearable\n              flat\n              solo-inverted\n              hide-details\n              prepend-inner-icon=\"mdi-magnify\"\n              label=\"Search\"\n            ></v-text-field>\n          </v-toolbar>\n        </template>\n        <!--Here is he main body of the data iterator will shown all the desirable result with repect to the search bar-->\n        <template v-slot:default=\"props\">\n          <v-row>\n            <v-col v-for=\"item in props.items\" :key=\"item.name\" cols=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\n              <!--type v-card will be the main body of the iterator and contain different information of the restaurant-->\n              <v-card>\n                <div>\n                  <v-img\n                    class=\"white--text align-end dark\"\n                    height=\"200px\"\n                    src=\"@/assets/matching_photo/meal_7.jpg\"\n                    gradient=\"to bottom, rgba(255, 255, 255, 0), rgba(0, 0, 0, 0.4)\"\n                  >\n                    <v-card-title class=\"display-1\">\n                      {{\n                      item.restaurantName\n                      }}\n                    </v-card-title>\n                  </v-img>\n                </div>\n                <!--  Here will show the restaurant destination, and opening time-->\n                <v-card-text>\n                  <div class=\"headline py-0\">{{ item.restaurantDestination }}</div>\n                  <div class=\"subtitle-1 py-0\">\n                    Daily: {{ item.dailyOpeningTime }} -\n                    {{ item.dailyClosingTime }}\n                  </div>\n                  <div class=\"subtitle-1 py-0\">\n                    Holiday: {{ item.holidayOpeningTime }} -\n                    {{ item.holidayClosingTime }}\n                  </div>\n                </v-card-text>\n                <v-card-actions>\n                  <v-spacer />\n                  <!--  here we will call the child component of the vue call comment-->\n                  <Comment :restaurantName=\"item.restaurantName\" />\n                </v-card-actions>\n              </v-card>\n            </v-col>\n          </v-row>\n        </template>\n\n        <!-- the footer of the v data iterator is for selecting how many items in a page-->\n        <template v-slot:footer>\n          <v-row class=\"mt-2 mx-5\" align=\"center\" justify=\"center\">\n            <span class=\"grey--text\">Items per page</span>\n            <v-menu offset-y>\n              <template v-slot:activator=\"{ on }\">\n                <v-btn dark text color=\"primary\" class=\"ml-2\" v-on=\"on\">\n                  {{ itemsPerPage }}\n                  <v-icon>mdi-chevron-down</v-icon>\n                </v-btn>\n              </template>\n\n              <!--Here is the total number of page of the result-->\n              <v-list>\n                <v-list-item\n                  v-for=\"(number, index) in itemsPerPageArray\"\n                  :key=\"index\"\n                  @click=\"updateItemsPerPage(number)\"\n                >\n                  <v-list-item-title>{{ number }}</v-list-item-title>\n                </v-list-item>\n              </v-list>\n            </v-menu>\n            <v-spacer></v-spacer>\n            <!-- we can press kclick to control which number of the page-->\n            <span class=\"mr-4 grey--text\">Page {{ page }} of {{ numberOfPages }}</span>\n            <v-btn fab dark color=\"secondary darken-3\" class=\"mr-1\" @click=\"formerPage\">\n              <v-icon>mdi-chevron-left</v-icon>\n            </v-btn>\n            <v-btn fab dark color=\"secondary darken-3\" class=\"ml-1\" @click=\"nextPage\">\n              <v-icon>mdi-chevron-right</v-icon>\n            </v-btn>\n          </v-row>\n        </template>\n      </v-data-iterator>\n    </v-container>\n  </div>\n</template>\n<script>\nimport { service } from \"@/plugins/request_service\";\nimport Comment from \"@/components/restaurant/Comment\";\n// import the child component and the the plugins from external file or library\n\nexport default {\n  components: {\n    Comment // all child component will be listed here\n  },\n  data: () => ({\n    itemsPerPageArray: [4, 8, 12],\n    search: \"\",\n    filter: {},\n    sortDesc: false,\n    page: 1,\n    itemsPerPage: 4,\n    sortBy: \"restaurantName\", // it is the default sorting keyword and we not yet type the code and test for other keywords\n\n    // it is use to test if the cardbox are shown correctly, u will see it when local database is not linked or exist.\n    restaurant: [\n      {\n        restaurantName: \"aaaa\",\n        restaurantDestination: \"aaaa\",\n        dailyOpeningTime: \"aaaaa\",\n        dailyClosingTime: \"aaaa\",\n        holidayOpeningTime: \"aaaa\",\n        holidayClosingTime: \"aaaaa\"\n      }\n    ]\n  }),\n  computed: {\n    // to get the latest page number to update the window\n    numberOfPages() {\n      return Math.ceil(this.restaurant.length / this.itemsPerPage);\n    },\n    // to update the page via the search keyword\n    filteredKeys() {\n      return this.keys.filter(key => key !== `Name`);\n    }\n  },\n  mounted() {\n    this.fetchData(); //get the unsorted data from database at mounted stage after the template iss being created\n  },\n  methods: {\n    //next page button\n    nextPage() {\n      if (this.page + 1 <= this.numberOfPages) this.page += 1;\n    },\n\n    //previous page button\n    formerPage() {\n      if (this.page - 1 >= 1) this.page -= 1;\n    },\n\n    //call when different number of item requires is changed\n    updateItemsPerPage(number) {\n      this.itemsPerPage = number;\n    },\n\n    fetchData() {\n      service.get(`/restaurant/getAllRestaurant/`).then(res => {\n        if (res.data.success) {\n          this.restaurant = res.data.data;\n        }\n      });\n    }\n  }\n};\n</script>\n"]}]}