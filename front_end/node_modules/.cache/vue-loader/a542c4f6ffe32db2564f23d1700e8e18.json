{"remainingRequest":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/Chatroom.vue?vue&type=style&index=0&id=5f0fe8ed&scoped=true&lang=css&","dependencies":[{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/src/views/Chatroom.vue","mtime":1589641350000},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/css-loader/index.js","mtime":1573785100188},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1573785100670},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/postcss-loader/src/index.js","mtime":1573744405731},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vuetify-loader/lib/loader.js","mtime":1584457032094},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1583842195418},{"path":"/Users/yuekalong/Desktop/Year 3 Sem 2/CSCI3100/Project/RiceLeg---CSCI3100-Project-Spring-2020-/front_end/node_modules/vue-loader/lib/index.js","mtime":1573785100670}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.scroll {\n  overflow-y: scroll;\n}\n",{"version":3,"sources":["Chatroom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8QA;AACA;AACA","file":"Chatroom.vue","sourceRoot":"src/views","sourcesContent":["/*\n * MODULE NAME: CHATROOM\n * PROGRAMMER: YUE KA LONG\n * VERSION: 1.0 (16 MAY 2020)\n *\n * PURPOSE: THIS IS CHATROOM PAGE WHICH PROVIDE THE ENVIRONMENT TO THE PAIRED USERS TO TALK TO EACH OTHER\n *\n */\n<!-- This is our Chatroom Page -->\n<template>\n  <div id=\"chatroom\">\n    <!-- set up the container -->\n    <v-container grid-list-xl>\n      <!-- make a card -->\n      <v-card class=\"secondary\">\n        <!-- set the card title -->\n        <v-card-title class=\"white--text\">\n          <h1 class=\"font-weight-light\">Chatroom</h1>\n        </v-card-title>\n        <div></div>\n        <v-card-text class=\"white text-center\">\n          <!-- appear a circular loading image if chatroom is not ready -->\n          <v-progress-circular\n            class=\"justify-center\"\n            :size=\"50\"\n            v-if=\"!loaded\"\n            indeterminate\n            color=\"secondary\"\n            style=\"text-align:center;\"\n          ></v-progress-circular>\n\n          <!-- Make use of ChatroomToolBar component to show the list of room and handle for joining it -->\n          <ChatroomToolbar\n            v-if=\"loaded\"\n            :user=\"this.$store.state.user\"\n            @joinedRoom=\"joinedRoom\"\n            :listOfRoom=\"listOfRoom\"\n          />\n          <!-- set the message area -->\n          <v-alert\n            v-if=\"loaded\"\n            height=\"500px\"\n            elevation=\"1\"\n            color=\"primary\"\n            outlined\n            class=\"scroll\"\n          >\n            <!-- date detail button -->\n            <v-btn\n              v-if=\"haveRoom\"\n              style=\"float:right;\"\n              outlined\n              small\n              fab\n              color=\"teal\"\n              @click=\"getDateDetail\"\n            >\n              <v-icon>mdi-file-document-box</v-icon>\n            </v-btn>\n\n            <!-- showing the history and also the room messages -->\n            <div style=\"float:left; text-align:left;\">\n              <h3 class=\"grey--text\">{{ roomMessage }}</h3>\n              <span\n                class=\"text--disabled\"\n                v-for=\"history in history.split('\\n')\"\n                :key=\"history.index\"\n              >\n                {{ history }}\n                <br />\n              </span>\n              <template v-for=\"message in message.split('\\n')\">\n                {{ message }}\n                <br :key=\"message\" />\n              </template>\n            </div>\n          </v-alert>\n\n          <!-- text input field for inputing the message -->\n          <v-text-field\n            v-if=\"loaded\"\n            :disabled=\"!haveRoom\"\n            v-model=\"newMsg\"\n            label=\"Type your message here!\"\n            outlined\n            v-on:keyup.enter=\"sendMsg\"\n          />\n\n          <!-- send button -->\n          <v-btn v-if=\"loaded\" :disabled=\"!haveRoom\" class=\"secondary\" @click=\"sendMsg\">Send</v-btn>\n        </v-card-text>\n      </v-card>\n\n      <!-- dialog(pop up window) of date detail -->\n      <v-dialog v-model=\"dialog\" max-width=\"50%\">\n        <v-card centered height=\"100%\" style=\"text-align:center;\">\n          <!-- card title -->\n          <v-card-title class=\"headline justify-center primary--text\">Date Detail</v-card-title>\n          <!-- date details -->\n          <v-card-text pa-3>\n            <div class=\"display-1 py-0 secondary--text font-weight-bold\">{{ date.requestName }}</div>\n            <div class=\"subtitle-1 py-0 secondary--text\">#{{ date.requestID }}</div>\n            <div class=\"headline py-0 secondary--text font-weight-medium\">{{ date.location }}</div>\n            <div\n              class=\"headline py-0 secondary--text font-weight-medium\"\n            >{{ date.date.slice(0, 10) }}</div>\n            <div class=\"headline py-0 secondary--text font-weight-medium\">\n              {{ date.startingTime.slice(0, 5) }} -\n              {{ date.endingTime.slice(0, 5) }}\n            </div>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport socket from \"vue-socket.io\";\nimport ChatroomToolbar from \"@/components/chatroom/ChatroomToolbar.vue\";\nimport { service } from \"@/plugins/request_service\";\n\nexport default {\n  name: \"chatroom\",\n  components: {\n    ChatroomToolbar\n  },\n  data: () => ({\n    message: \"\", // for storing the message\n    history: \"\", // for storing the history message\n    newMsg: \"\", // for storing the input message\n    loaded: false, // variable to help to show finish loading the page or not\n    haveRoom: false, // variable to help to show the user got a room or not\n    roomMessage: \"Please join a room first.\", // the room message when joined a room\n\n    // for storing the list of room\n    listOfRoom: [\n      {\n        oppName: \"Room 1\",\n        roomID: \"1000\"\n      },\n      {\n        oppName: \"Room 2\",\n        roomID: \"2000\"\n      }\n    ],\n    selectedRoom: null, // for storing the selected room\n    dialog: false, // variable to help to show the dialog or not\n\n    // for storing the date detail\n    date: {\n      requestID: 0,\n      requestName: \"Hi. Let's eat\",\n      location: \"Paper & Coffee @Chung Chi\",\n      date: \"2020-04-22T16:00:00.000Z\",\n      startingTime: \"13:00:00\",\n      endingTime: \"14:00:00\",\n      createUser: \"test\",\n      stateVegetarian: 0,\n      stateFinish: 0\n    }\n  }),\n  // run the following command when page is load\n  mounted() {\n    this.getListofRoom();\n  },\n  sockets: {\n    // get the message history\n    getHistory(history) {\n      this.history = history;\n      var chatbox = this.$el.querySelector(\".scroll\");\n      chatbox.scrollTop = chatbox.scrollHeight;\n    },\n    // get the message\n    receiveMsg(receiveMsg) {\n      this.message += receiveMsg;\n      var chatbox = this.$el.querySelector(\".scroll\");\n      chatbox.scrollTop = chatbox.scrollHeight;\n    }\n  },\n  methods: {\n    // get the list of room\n    getListofRoom() {\n      service\n        .get(`/chatroom/getListofRoom/${this.$store.state.user[\"username\"]}`, {\n          headers: {\n            Authorization: \"Bearer \" + this.$store.state.token\n          }\n        })\n        .then(res => {\n          if (res.data.success) {\n            // if success\n            let temp = res.data.data;\n            // storing the response data into the list of room\n            this.listOfRoom = temp.map(\n              s =>\n                (s = {\n                  roomID: s.roomID,\n                  oppName:\n                    s.username_A == this.$store.state.user[\"username\"]\n                      ? s.username_B\n                      : s.username_A,\n                  requestID: s.requestID\n                })\n            );\n            // to enable the chatroom\n            this.loaded = true;\n\n            // if number of room is zero\n            if (this.listOfRoom.length == 0) {\n              this.roomMessage =\n                \"You have no date at this moment... Maybe you should make a request or send some invitations to get a date\";\n            }\n          }\n        });\n    },\n    // handle to join the room\n    joinedRoom(room) {\n      this.haveRoom = true;\n      this.roomMessage = `You have joined ${room.oppName}'s room`;\n      this.message = \"\";\n      this.selectedRoom = room;\n    },\n    // handle to send message\n    sendMsg() {\n      // emit the message to the back-end socket\n      this.$socket.emit(\"sendMsg\", this.$store.state.user, this.newMsg);\n      this.newMsg = \"\";\n    },\n    // to get the date detail\n    getDateDetail() {\n      service\n        .get(`/chatroom/getDateDetail/${this.selectedRoom.requestID}`, {\n          headers: {\n            Authorization: \"Bearer \" + this.$store.state.token\n          }\n        })\n        .then(res => {\n          if (res.data.success) {\n            // assign the date detail\n            this.date = res.data.data;\n            this.dialog = true;\n          }\n        });\n    }\n  },\n  // before joining this page, connect the socket in back-end\n  beforeRouteEnter(to, from, next) {\n    if (!Vue.prototype.$socket) {\n      Vue.use(\n        new socket({\n          debug: true,\n          connection: \"http://localhost:3000\", //process.env.VUE_APP_BACKEND,\n          vuex: {}\n        })\n      );\n    }\n    next();\n  },\n  // before leaving this page, disconnect the socket in back-end\n  beforeRouteLeave(to, from, next) {\n    this.$socket.emit(\"leavePage\", this.$store.state.user);\n    delete Vue.prototype.$socket;\n    next();\n  }\n};\n</script>\n\n<style scoped>\n.scroll {\n  overflow-y: scroll;\n}\n</style>\n"]}]}